#include<stdio.h>
int sjf()
{

float bt[10],temp,at[10],wt[10],tt[10],ta=0,sum=0,wavg=0,tavg=0,tsum=0,wsum=0;
int i,n,j,p[10]={1,2,3,4,5,6,7,8,9,10},min,k=1,btime=0;

printf(" -------Shortest Job First Scheduling ( NP )-------\n");
printf("\nEnter the No. of processes :");
scanf("%d",&n);
 
for(i=0;i<n;i++)
{
printf("\tEnter the burst time of %d process :",i+1);
scanf("%f",&bt[i]);
printf("\tEnter the arrival time of %d process :",i+1);
scanf("%f",&at[i]);

}
 
/*Sorting According to Arrival Time*/
 
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
if(at[i]<at[j])
{
temp=p[j];
p[j]=p[i];
p[i]=temp;
temp=at[j];
at[j]=at[i];
at[i]=temp;
temp=bt[j];
bt[j]=bt[i];
bt[i]=temp;
}
}
}
 
/*Arranging the table according to Burst time,
Execution time and Arrival Time
Arrival time <= Execution time
*/
 
for(j=0;j<n;j++)
{
btime=btime+bt[j];
min=bt[k];
for(i=k;i<n;i++)
{
if (btime>=at[i] && bt[i]<min)
{
temp=p[k];
p[k]=p[i];
p[i]=temp;
temp=at[k];
at[k]=at[i];
at[i]=temp;
temp=bt[k];
bt[k]=bt[i];
bt[i]=temp;
}
}
k++;
}
wt[0]=0;
for(i=1;i<n;i++)
{
sum=sum+bt[i-1];
wt[i]=sum-at[i];
wsum=wsum+wt[i];
}
 
wavg=(wsum/n);
for(i=0;i<n;i++)
{
ta=ta+bt[i];
tt[i]=ta-at[i];
tsum=tsum+tt[i];
}
 
tavg=(tsum/n);
 
printf("************************");
printf("\n RESULT:-");
printf("\nProcess\t Burst\t Arrival\t Waiting\t Turn-around" );
for(i=0;i<n;i++)
{
printf("\n p%d\t %0.2f\t %0.2f\t\t %0.2f\t\t\t%0.2f",p[i],bt[i],at[i],wt[i],tt[i]);
}
 
printf("\n\nAVERAGE WAITING TIME : %0.2f",wavg);
printf("\nAVERAGE TURN AROUND TIME : %0.2f",tavg);
return 0;
}

void fcfs()
{
    float process[500],aTime[500],bTime[500],abTime[500],wTime[500],tat_time[500];
    int n = 0,i = 0 ;
    float aw_time = 0, atat_time = 0;
    printf("*** FCFS Scheduling Algorithm Using Arrival Time ***\n");
    printf("\nEnter the number of process : ");
    scanf("%d",&n);

 for(i=0;i<n;i++)
{
printf("\tEnter the burst time of %d process :",i+1);
scanf(" %f",&bTime[i]);
printf("\tEnter the arrival time of %d process :",i+1);
scanf(" %f",&aTime[i]);
}
   wTime[0] = 0;
    tat_time[0] = bTime[0];
    abTime[0] = bTime[0]+aTime[0];
    for( i = 1 ; i < n ; i++){
        abTime[i] = abTime[i-1] + bTime[i];
        tat_time[i] = abTime[i] - aTime[i];
        wTime[i] = tat_time[i] - bTime[i];
    }
    for(i = 0 ; i < n ; i++){
        aw_time = aw_time + wTime[i];
        atat_time = atat_time + tat_time[i];
    }
    printf("************************");
printf("\n RESULT:-\n");

    printf("process \tArrival time\tBurst time\tComplete time\tTurn around time   Waiting time\n");
    for(i = 0 ; i < n ; i++){
        printf("P%d\t\t%.2f\t\t%0.2f\t\t%0.2f\t\t%0.2f\t\t    %0.2f\n",i,aTime[i],bTime[i],abTime[i],tat_time[i],wTime[i]);
    }
    printf("\nAverage waiting time : %0.2f",aw_time/n);
    printf("\nAverage turn around time : %0.2f",atat_time/n);
}
int sjf_ideal1()
{

float bt[10],temp,at[10],wt[10],tt[10],ta=0,sum=0,wavg=0,tavg=0,tsum=0,wsum=0;
int i,n,j,p[10]={1,2,3,4,5,6,7,8,9,10},min,k=1,btime=0;

printf(" -------Shortest Job First Scheduling ( NP )-------\n");
printf("\nEnter the No. of processes :");
scanf("%d",&n);
n=n+1;
for(i=0;i<n;i++)
{
	if(i==0)
	{
		bt[i]=1;
		at[i]=0;
		
	}
	else
	{
	
printf("\tEnter the burst time of %d process :",i);
scanf("%f",&bt[i]);
printf("\tEnter the arrival time of %d process :",i);
scanf("%f",&at[i]);
}
}
 
/*Sorting According to Arrival Time*/
 
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
if(at[i]<=at[j])
{
	if(at[i]==at[j])
	{
		for(i=0;i<n;i++)
	{
	for(j=0;j<n;j++)
	{
		if(bt[i]<bt[j])
		{
		
temp=p[j];
p[j]=p[i];
p[i]=temp;
temp=at[j];
at[j]=at[i];
at[i]=temp;
temp=bt[j];
bt[j]=bt[i];
bt[i]=temp;	
				}		
	}
}
temp=p[j];
p[j]=p[i];
p[i]=temp;
temp=at[j];
at[j]=at[i];
at[i]=temp;
temp=bt[j];
bt[j]=bt[i];
bt[i]=temp;
}
}
}
 
/*Arranging the table according to Burst time,
Execution time and Arrival Time
Arrival time <= Execution time
*/
 
for(j=0;j<n;j++)
{
btime=btime+bt[j];
min=bt[k];
for(i=k;i<n;i++)
{
if (btime>=at[i] && bt[i]<min)
{
temp=p[k];
p[k]=p[i];
p[i]=temp;
temp=at[k];
at[k]=at[i];
at[i]=temp;
temp=bt[k];
bt[k]=bt[i];
bt[i]=temp;
}
}
k++;
}
wt[0]=0;
for(i=1;i<n;i++)
{
sum=sum+bt[i-1];
wt[i]=sum-at[i];
wsum=wsum+wt[i];
}
 
wavg=(wsum/n);
for(i=0;i<n;i++)
{
	
ta=ta+bt[i];
tt[i]=ta-at[i];
tsum=tsum+tt[i];
}
tsum=tsum-1;
int y=n-1;
tavg=(tsum/y);
 
printf("************************");
printf("\n RESULT:-");
printf("\ncpu ideal time =1 unit i e from 0 to 1\n");
printf("\nProcess\t Burst\t Arrival\t Waiting\t Turn-around" );
for(i=0;i<n;i++)
{
	if(i==0)
	{
		
		continue;
	}
printf("\n p%d\t %0.2f\t %0.2f\t\t %0.2f\t\t\t%0.2f",p[i]-1,bt[i],at[i],wt[i],tt[i]);
}
 
printf("\n\nAVERAGE WAITING TIME : %0.2f",wavg);
printf("\nAVERAGE TURN AROUND TIME : %0.2f",tavg);
return 0;
}
}
main()
{
	int x;
	printf("press 1 for shrtest job first\n");
	printf("press 2 for first come first serve\n");
	printf("press 3 for shrtest job first and ideal time 0 to 1\n");
	scanf("%d",&x);
	switch(x)
	{
		case 1:
			{
			
			sjf();
			break;
		}
		case 2:
			{
			fcfs();
			break;
		}
		case 3:
			{
			sjf_ideal1();
			break;
		}
		default:
			printf("wrong choice\n");
	}	
}
